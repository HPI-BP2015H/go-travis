// Code generated by go-bindata.
// sources:
// init/.DS_Store
// init/c.yml
// init/clojure.yml
// init/cpp.yml
// init/erlang.yml
// init/go.yml
// init/groovy.yml
// init/haskell.yml
// init/java.yml
// init/node_js.yml
// init/objective-c.yml
// init/perl.yml
// init/php.yml
// init/python.yml
// init/ruby.yml
// init/scala.yml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x3b\x0e\xc2\x30\x10\x44\x77\x8c\x0b\x4b\x34\x2e\x29\xdd\x70\x00\x6e\x60\x45\xe1\x04\x5c\x80\x82\x2b\xd0\xfb\xe8\x24\xda\x11\xb2\x14\x52\x50\x25\x82\x79\x92\xf5\x56\x8a\x9d\x4f\xe3\xec\xd8\xcc\x30\x3c\x1f\x17\xb3\x3c\x95\xc9\xdc\x76\xb6\x8f\x24\x8e\x05\xa1\xab\xc1\x7b\x08\x21\x84\x10\x62\xdf\xc0\x95\x8e\xdb\xbe\x86\x10\x62\x87\xcc\xfb\x43\xa1\x2b\xdd\xdc\xe0\xf5\x40\xc7\x6e\x4d\xa6\x0b\x5d\xe9\xe6\x06\xe7\x05\x3a\xd2\x89\xce\x74\xa1\x2b\xdd\xdc\xdc\xb4\xc0\xf0\x01\x3e\x19\x4c\x28\x60\x0a\x41\xa1\xeb\x97\x1f\x2d\xc4\x9f\x70\x70\xe5\xf9\xff\x7f\xb5\xd5\xfc\x2f\x84\xf8\x61\x10\xc7\xdb\x38\xd8\x3b\x10\x2c\x27\x4c\xe3\xde\xd5\xcd\xd6\x9b\x80\xe0\x87\x85\xa7\x6e\x6d\xa1\x2b\xdd\xdc\x6a\x04\x84\xd8\x8a\x57\x00\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func initDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_initDs_store,
		"init/.DS_Store",
	)
}

func initDs_store() (*asset, error) {
	bytes, err := initDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1461587330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initCYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\xe6\x4a\xce\xcf\x2d\xc8\xcc\x49\x2d\xb2\xe2\xd2\x55\x48\x06\x49\x00\xe9\xf4\xe4\x64\x40\x00\x00\x00\xff\xff\x51\x7b\x11\xc0\x23\x00\x00\x00")

func initCYmlBytes() ([]byte, error) {
	return bindataRead(
		_initCYml,
		"init/c.yml",
	)
}

func initCYml() (*asset, error) {
	bytes, err := initCYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/c.yml", size: 35, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initClojureYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\xce\xc9\xcf\x2a\x2d\x4a\x05\x04\x00\x00\xff\xff\x54\x6b\x78\x1e\x11\x00\x00\x00")

func initClojureYmlBytes() ([]byte, error) {
	return bindataRead(
		_initClojureYml,
		"init/clojure.yml",
	)
}

func initClojureYml() (*asset, error) {
	bytes, err := initClojureYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/clojure.yml", size: 17, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initCppYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\x2e\x28\xe0\x4a\xce\xcf\x2d\xc8\xcc\x49\x2d\xb2\xe2\xd2\x55\x48\x06\x49\x01\xe9\xf4\xe4\x64\x40\x00\x00\x00\xff\xff\x65\x2e\x2f\x1e\x25\x00\x00\x00")

func initCppYmlBytes() ([]byte, error) {
	return bindataRead(
		_initCppYml,
		"init/cpp.yml",
	)
}

func initCppYml() (*asset, error) {
	bytes, err := initCppYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/cpp.yml", size: 37, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initErlangYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\x2d\x02\xb1\xb9\xf2\x4b\x0a\xe2\x8b\x52\x73\x52\x13\x8b\x53\xad\xb8\x74\x15\x82\x0c\xcd\x9c\xb8\x00\x01\x00\x00\xff\xff\xc2\xb1\xcc\xd7\x25\x00\x00\x00")

func initErlangYmlBytes() ([]byte, error) {
	return bindataRead(
		_initErlangYml,
		"init/erlang.yml",
	)
}

func initErlangYml() (*asset, error) {
	bytes, err := initErlangYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/erlang.yml", size: 37, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGoYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\xcf\xe7\x4a\xcf\xb7\xe2\xd2\x55\x50\x32\xd4\x33\x50\x82\xd0\xc6\x4a\x5c\x80\x00\x00\x00\xff\xff\x0f\x96\xa8\xd1\x21\x00\x00\x00")

func initGoYmlBytes() ([]byte, error) {
	return bindataRead(
		_initGoYml,
		"init/go.yml",
	)
}

func initGoYml() (*asset, error) {
	bytes, err := initGoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/go.yml", size: 33, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initGroovyYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x48\x2f\xca\xcf\x2f\xab\xe4\x02\x04\x00\x00\xff\xff\xc5\xc7\x8a\xd8\x11\x00\x00\x00")

func initGroovyYmlBytes() ([]byte, error) {
	return bindataRead(
		_initGroovyYml,
		"init/groovy.yml",
	)
}

func initGroovyYml() (*asset, error) {
	bytes, err := initGroovyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/groovy.yml", size: 17, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initHaskellYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\xc8\x48\x2c\xce\x4e\xcd\xc9\xe1\x02\x04\x00\x00\xff\xff\x7f\x1f\x65\xbc\x12\x00\x00\x00")

func initHaskellYmlBytes() ([]byte, error) {
	return bindataRead(
		_initHaskellYml,
		"init/haskell.yml",
	)
}

func initHaskellYml() (*asset, error) {
	bytes, err := initHaskellYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/haskell.yml", size: 18, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initJavaYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\xc8\x4a\x2c\x4b\xe4\xca\x4a\xc9\xb6\xe2\xd2\x55\xc8\x2f\x4a\x4c\xce\x49\x05\x72\xcc\x41\x9c\x82\xd4\x3c\x20\xd3\x0c\x10\x00\x00\xff\xff\x34\xc6\x54\x06\x2b\x00\x00\x00")

func initJavaYmlBytes() ([]byte, error) {
	return bindataRead(
		_initJavaYml,
		"init/java.yml",
	)
}

func initJavaYml() (*asset, error) {
	bytes, err := initJavaYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/java.yml", size: 43, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initNode_jsYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\xc8\xcb\x4f\x49\x8d\xcf\x2a\xe6\x82\xd2\x56\x5c\xba\x0a\x4a\x06\x7a\x86\x86\x4a\x50\x86\x81\x12\x17\x20\x00\x00\xff\xff\x50\xaa\xe5\x03\x2d\x00\x00\x00")

func initNode_jsYmlBytes() ([]byte, error) {
	return bindataRead(
		_initNode_jsYml,
		"init/node_js.yml",
	)
}

func initNode_jsYml() (*asset, error) {
	bytes, err := initNode_jsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/node_js.yml", size: 45, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initObjectiveCYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\xc8\x4f\xca\x4a\x4d\x2e\xc9\x2c\x4b\xd5\x4d\xe6\x02\x04\x00\x00\xff\xff\x4b\x51\xe5\x4d\x16\x00\x00\x00")

func initObjectiveCYmlBytes() ([]byte, error) {
	return bindataRead(
		_initObjectiveCYml,
		"init/objective-c.yml",
	)
}

func initObjectiveCYml() (*asset, error) {
	bytes, err := initObjectiveCYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/objective-c.yml", size: 22, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initPerlYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x28\x48\x2d\xca\xe1\x02\x11\x56\x5c\xba\x0a\x4a\xa6\x7a\x86\x66\x4a\x50\x86\x89\x12\x20\x00\x00\xff\xff\x2c\x22\x7a\xe1\x26\x00\x00\x00")

func initPerlYmlBytes() ([]byte, error) {
	return bindataRead(
		_initPerlYml,
		"init/perl.yml",
	)
}

func initPerlYml() (*asset, error) {
	bytes, err := initPerlYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/perl.yml", size: 38, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initPhpYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x28\xc8\x28\xe0\x02\x62\x2b\x2e\x5d\x05\x25\x53\x3d\x53\x25\x08\x6d\xa2\x04\x08\x00\x00\xff\xff\x00\x9d\x49\xbe\x22\x00\x00\x00")

func initPhpYmlBytes() ([]byte, error) {
	return bindataRead(
		_initPhpYml,
		"init/php.yml",
	)
}

func initPhpYml() (*asset, error) {
	bytes, err := initPhpYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/php.yml", size: 34, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initPythonYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x28\xa8\x2c\xc9\xc8\xcf\xe3\x82\x50\x56\x5c\xba\x0a\x4a\x46\x7a\xe6\x4a\x20\xda\x58\xcf\x18\x4c\x17\x54\x16\x54\x2a\x71\x01\x02\x00\x00\xff\xff\xef\x23\x0a\x73\x32\x00\x00\x00")

func initPythonYmlBytes() ([]byte, error) {
	return bindataRead(
		_initPythonYml,
		"init/python.yml",
	)
}

func initPythonYml() (*asset, error) {
	bytes, err := initPythonYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/python.yml", size: 50, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x28\x2a\x4d\xaa\xe4\x2a\x2a\xcb\xb5\xe2\xd2\x55\x30\xd2\x33\xd0\x33\x00\xd2\x86\x7a\x96\x7a\xc6\x40\x3a\x0b\x24\xa9\x6b\x68\x99\x9b\x9f\x92\x0a\xe4\x16\x25\x55\xe8\x1a\x71\x01\x02\x00\x00\xff\xff\x07\xfd\x95\x80\x3b\x00\x00\x00")

func initRubyYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyYml,
		"init/ruby.yml",
	)
}

func initRubyYml() (*asset, error) {
	bytes, err := initRubyYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby.yml", size: 59, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initScalaYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x49\xcc\x4b\x2f\x4d\x4c\x4f\xb5\x52\x28\x4e\x4e\xcc\x49\xe4\x02\x93\x56\x5c\xba\x0a\x4a\x46\x7a\x86\x06\x7a\x86\x4a\x10\xa6\xa5\x9e\xb1\x12\x20\x00\x00\xff\xff\xa9\x92\xb2\x79\x2b\x00\x00\x00")

func initScalaYmlBytes() ([]byte, error) {
	return bindataRead(
		_initScalaYml,
		"init/scala.yml",
	)
}

func initScalaYml() (*asset, error) {
	bytes, err := initScalaYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/scala.yml", size: 43, mode: os.FileMode(493), modTime: time.Unix(1460070202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/.DS_Store":       initDs_store,
	"init/c.yml":           initCYml,
	"init/clojure.yml":     initClojureYml,
	"init/cpp.yml":         initCppYml,
	"init/erlang.yml":      initErlangYml,
	"init/go.yml":          initGoYml,
	"init/groovy.yml":      initGroovyYml,
	"init/haskell.yml":     initHaskellYml,
	"init/java.yml":        initJavaYml,
	"init/node_js.yml":     initNode_jsYml,
	"init/objective-c.yml": initObjectiveCYml,
	"init/perl.yml":        initPerlYml,
	"init/php.yml":         initPhpYml,
	"init/python.yml":      initPythonYml,
	"init/ruby.yml":        initRubyYml,
	"init/scala.yml":       initScalaYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		".DS_Store":       &bintree{initDs_store, map[string]*bintree{}},
		"c.yml":           &bintree{initCYml, map[string]*bintree{}},
		"clojure.yml":     &bintree{initClojureYml, map[string]*bintree{}},
		"cpp.yml":         &bintree{initCppYml, map[string]*bintree{}},
		"erlang.yml":      &bintree{initErlangYml, map[string]*bintree{}},
		"go.yml":          &bintree{initGoYml, map[string]*bintree{}},
		"groovy.yml":      &bintree{initGroovyYml, map[string]*bintree{}},
		"haskell.yml":     &bintree{initHaskellYml, map[string]*bintree{}},
		"java.yml":        &bintree{initJavaYml, map[string]*bintree{}},
		"node_js.yml":     &bintree{initNode_jsYml, map[string]*bintree{}},
		"objective-c.yml": &bintree{initObjectiveCYml, map[string]*bintree{}},
		"perl.yml":        &bintree{initPerlYml, map[string]*bintree{}},
		"php.yml":         &bintree{initPhpYml, map[string]*bintree{}},
		"python.yml":      &bintree{initPythonYml, map[string]*bintree{}},
		"ruby.yml":        &bintree{initRubyYml, map[string]*bintree{}},
		"scala.yml":       &bintree{initScalaYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
